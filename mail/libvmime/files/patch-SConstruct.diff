--- SConstruct.orig	2020-02-16 23:19:57.000000000 -0500
+++ SConstruct	2020-02-17 00:10:14.000000000 -0500
@@ -15,7 +15,7 @@
 #   . scons doc           build documentation for the project (Doxygen)
 #
 
-import commands
+import subprocess
 import os
 import sys
 import re
@@ -619,7 +619,7 @@
 	libgsasl_pc = string.strip(os.popen("pkg-config --list-all | grep '^libgsasl[ ]' | cut -f 1 -d ' '").read())
 
 	if len(libgsasl_pc) == 0:
-		print "ERROR: GNU SASL development package is not installed\n"
+		print("ERROR: GNU SASL development package is not installed\n")
 		Exit(1)
 
 	env.ParseConfig('pkg-config --cflags --libs ' + libgsasl_pc)
@@ -631,7 +631,7 @@
 		libgnutls_pc = string.strip(os.popen("pkg-config --list-all | grep '^gnutls[ ]' | cut -f 1 -d ' '").read())
 
 	if len(libgnutls_pc) == 0:
-		print "ERROR: GNU TLS development package is not installed\n"
+		print("ERROR: GNU TLS development package is not installed\n")
 		Exit(1)
 
 	env.ParseConfig('pkg-config --cflags --libs ' + libgnutls_pc)
@@ -687,13 +687,13 @@
 if env['with_messaging'] == 'yes':
 	if IsProtocolSupported(messaging_protocols, 'maildir'):
 		if env['with_filesystem'] != 'yes':
-			print "ERROR: 'maildir' protocol requires file-system support!\n"
+			print("ERROR: 'maildir' protocol requires file-system support!\n")
 			Exit(1)
 
 # Sendmail transport is only available on POSIX platforms
 if os.name != 'posix':
 	if IsProtocolSupported(messaging_protocols, 'sendmail'):
-		print "WARNING: ignoring 'sendmail' support (only available on POSIX platforms)\n"
+		print("WARNING: ignoring 'sendmail' support (only available on POSIX platforms)\n")
 
 		newProtoList = [ ]
 
@@ -706,7 +706,7 @@
 # Check sendmail path
 if IsProtocolSupported(messaging_protocols, 'sendmail'):
 	if env['sendmail_path'] == '':
-		print "ERROR: no path specified for 'sendmail'"
+		print("ERROR: no path specified for 'sendmail'")
 		Exit(1)
 
 
@@ -714,25 +714,25 @@
 #  Configuration summary  #
 ###########################
 
-print ""
-print "+=================+"
-print "|  CONFIGURATION  |"
-print "+=================+"
-print ""
-print "Installation prefix      : " + env['prefix']
-print "Debugging mode           : " + env['debug']
-print "Messaging support        : " + env['with_messaging']
+print("")
+print("+=================+")
+print("|  CONFIGURATION  |")
+print("+=================+")
+print("")
+print("Installation prefix      : " + env['prefix'])
+print("Debugging mode           : " + env['debug'])
+print("Messaging support        : " + env['with_messaging'])
 if env['with_messaging'] == 'yes':
-	print "  * protocols            : " + env['with_messaging_protocols']
-print "File-system support      : " + env['with_filesystem']
-print "Platform handlers        : " + env['with_platforms']
-print "SASL support             : " + env['with_sasl']
-print "TLS/SSL support          : " + env['with_tls']
+	print("  * protocols            : " + env['with_messaging_protocols'])
+print("File-system support      : " + env['with_filesystem'])
+print("Platform handlers        : " + env['with_platforms'])
+print("SASL support             : " + env['with_sasl'])
+print("TLS/SSL support          : " + env['with_tls'])
 
 if IsProtocolSupported(messaging_protocols, 'sendmail'):
-	print "Sendmail path            : " + env['sendmail_path']
+	print("Sendmail path            : " + env['sendmail_path'])
 
-print ""
+print("")
 
 
 #########################
@@ -762,8 +762,8 @@
 config_hpp.write('// Target OS and architecture\n')
 
 if os.name == 'posix':
-	config_hpp.write('#define VMIME_TARGET_ARCH "' + commands.getoutput('uname -m') + '"\n')
-	config_hpp.write('#define VMIME_TARGET_OS "' + commands.getoutput('uname -s') + '"\n')
+	config_hpp.write('#define VMIME_TARGET_ARCH "' + subprocess.check_output('uname -m', universal_newlines=True, stderr=subprocess.PIPE, shell=True) + '"\n')
+	config_hpp.write('#define VMIME_TARGET_OS "' + subprocess.check_output('uname -s', universal_newlines=True, stderr=subprocess.PIPE, shell=True) + '"\n')
 else:
 	config_hpp.write('#define VMIME_TARGET_ARCH ""  // Unknown\n')
 	config_hpp.write('#define VMIME_TARGET_OS "' + sys.platform + '/' + os.name + '"\n')
@@ -873,10 +873,10 @@
 
 # Build directory
 if env['debug'] == 'yes':
-	BuildDir("#build/debug", 'src', duplicate = 0)
+	VariantDir("#build/debug", 'src', duplicate = 0)
 	buildDirectory = 'build/debug/'
 else:
-	BuildDir("#build/release", 'src', duplicate = 0)
+	VariantDir("#build/release", 'src', duplicate = 0)
 	buildDirectory = 'build/release/'
 
 # Create effective source files list
@@ -973,7 +973,7 @@
 			)
 		)
 	else:
-		print 'Debug mode must be enabled to build tests!'
+		print('Debug mode must be enabled to build tests!')
 		Exit(1)
 
 
@@ -2151,7 +2151,7 @@
 			for i in range(len(comps) - 1):
 				d = '*' + comps[i]
 
-				if not tmp.has_key(d):
+				if d not in tmp:
 					tmp[d] = {}
 
 				tmp = tmp[d]
@@ -2169,7 +2169,7 @@
 	def MSVC_OutputFiles(filesInDir):
 		global MSVC_filesDone, MSVC_dupCounter
 
-		for k in filesInDir.keys():
+		for k in list(filesInDir.keys()):
 			f = filesInDir[k]
 
 			# Directory
@@ -2331,7 +2331,7 @@
 		for f in libvmime_dist_files:
 			distFiles.append(packageFullName + '/' + f)
 			distFilesStr = distFilesStr + packageFullName + '/' + f + ' '
-			print f
+			print(f)
 
 		os.system('ln -s . ' + packageFullName)
 		os.system('tar jcf ' + packageFile + ' ' + distFilesStr)
